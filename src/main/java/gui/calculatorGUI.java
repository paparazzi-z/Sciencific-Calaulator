/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.regex.Pattern;
import gui.Method;
import java.awt.Color;

/**
 * This calculator scientific can do operations including plus, minus, multiply,
 * divide, modulo, sin, cos, tan, factorial and parenthesis.
 * 
 * The screen will show the result of calculation before as soon as you choose an
 * operator.
 * 
 * For calculation of sin, cos, tan and factorial, you need to first type in number
 * then choose operator. For example, if you want to calculate sin(2), you should
 * click '2' and then 'sin'.
 * 
 * You may need to use parenthesis to control the calculation order.
 * 
 * @author nan
 */
public class calculatorGUI extends javax.swing.JFrame {

    /**
     * Creates new form calculatorGUI
     */
    
    private double val = 0;// the result calculated
    private boolean go = false;// whether we can use the operators
    private boolean write = false;// whether we can continue typing in data
    private char opt = ' ';// last typed operator
    private boolean parenthesis = false;// whether there is parenthesis
    private char opt_par = ' ';// last typed operator in parenthesis
    private double val_par = 0;// the result calculated in parenthesis
    
    public calculatorGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        number1 = new javax.swing.JButton();
        number2 = new javax.swing.JButton();
        number3 = new javax.swing.JButton();
        number4 = new javax.swing.JButton();
        number5 = new javax.swing.JButton();
        number6 = new javax.swing.JButton();
        number7 = new javax.swing.JButton();
        number8 = new javax.swing.JButton();
        number9 = new javax.swing.JButton();
        number0 = new javax.swing.JButton();
        point = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        modulo = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        screen = new javax.swing.JTextField();
        scientific = new javax.swing.JToggleButton();
        factorial = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        cos = new javax.swing.JButton();
        tan = new javax.swing.JButton();
        parenthesisLeft = new javax.swing.JButton();
        parenthesisRight = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scientific Calculator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("window"); // NOI18N
        setPreferredSize(new java.awt.Dimension(298, 400));
        setSize(new java.awt.Dimension(298, 400));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        number1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number1.setText("1");
        number1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number1ActionPerformed(evt);
            }
        });

        number2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number2.setText("2");
        number2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number2ActionPerformed(evt);
            }
        });

        number3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number3.setText("3");
        number3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number3ActionPerformed(evt);
            }
        });

        number4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number4.setText("4");
        number4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number4ActionPerformed(evt);
            }
        });

        number5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number5.setText("5");
        number5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number5ActionPerformed(evt);
            }
        });

        number6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number6.setText("6");
        number6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number6ActionPerformed(evt);
            }
        });

        number7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number7.setText("7");
        number7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number7ActionPerformed(evt);
            }
        });

        number8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number8.setText("8");
        number8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number8ActionPerformed(evt);
            }
        });

        number9.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number9.setText("9");
        number9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number9ActionPerformed(evt);
            }
        });

        number0.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number0.setText("0");
        number0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number0ActionPerformed(evt);
            }
        });

        point.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        point.setText(".");
        point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointActionPerformed(evt);
            }
        });

        equals.setBackground(new java.awt.Color(164, 140, 52));
        equals.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        equals.setForeground(java.awt.Color.white);
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        plus.setBackground(new java.awt.Color(3, 106, 118));
        plus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        plus.setForeground(java.awt.Color.white);
        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        minus.setBackground(new java.awt.Color(3, 106, 118));
        minus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        minus.setForeground(java.awt.Color.white);
        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        multiply.setBackground(new java.awt.Color(3, 106, 118));
        multiply.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        multiply.setForeground(java.awt.Color.white);
        multiply.setText("*");
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        divide.setBackground(new java.awt.Color(3, 106, 118));
        divide.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        divide.setForeground(java.awt.Color.white);
        divide.setText("/");
        divide.setToolTipText("");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        modulo.setBackground(new java.awt.Color(3, 106, 118));
        modulo.setFont(new java.awt.Font("Ubuntu", 1, 10)); // NOI18N
        modulo.setForeground(java.awt.Color.white);
        modulo.setText("mod");
        modulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduloActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(176, 112, 112));
        clear.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        clear.setForeground(java.awt.Color.white);
        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        screen.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        screen.setText("0");
        screen.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        scientific.setBackground(new java.awt.Color(125, 36, 36));
        scientific.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        scientific.setForeground(java.awt.Color.white);
        scientific.setText("scientific");
        scientific.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scientificActionPerformed(evt);
            }
        });

        factorial.setBackground(new java.awt.Color(3, 106, 118));
        factorial.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        factorial.setForeground(java.awt.Color.white);
        factorial.setText("n!");
        factorial.setVisible(false);
        factorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorialActionPerformed(evt);
            }
        });

        sin.setBackground(new java.awt.Color(3, 106, 118));
        sin.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        sin.setForeground(java.awt.Color.white);
        sin.setText("sin");
        sin.setVisible(false);
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        cos.setBackground(new java.awt.Color(3, 106, 118));
        cos.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        cos.setForeground(java.awt.Color.white);
        cos.setText("cos");
        cos.setVisible(false);
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });

        tan.setBackground(new java.awt.Color(3, 106, 118));
        tan.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        tan.setForeground(java.awt.Color.white);
        tan.setText("tan");
        tan.setVisible(false);
        tan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanActionPerformed(evt);
            }
        });

        parenthesisLeft.setBackground(new java.awt.Color(3, 106, 118));
        parenthesisLeft.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        parenthesisLeft.setForeground(java.awt.Color.white);
        parenthesisLeft.setText("(");
        parenthesisLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parenthesisLeftActionPerformed(evt);
            }
        });

        parenthesisRight.setBackground(new java.awt.Color(3, 106, 118));
        parenthesisRight.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        parenthesisRight.setForeground(java.awt.Color.white);
        parenthesisRight.setText(")");
        parenthesisRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parenthesisRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(screen)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(number7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(number4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(number8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(number5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(number9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(number6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(point, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(number0, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modulo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(factorial, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(number1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(number2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(number3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(parenthesisLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(parenthesisRight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(scientific, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {divide, minus, multiply, number0, number1, number2, number3, number4, number5, number6, number7, number8, number9, plus, point});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scientific, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(number7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(number4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(number1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parenthesisLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parenthesisRight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(point, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number0, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(factorial, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modulo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cos, divide, equals, minus, multiply, number0, number1, number2, number3, number4, number5, number6, number7, number8, number9, plus, point});

        number1.getAccessibleContext().setAccessibleName("");
        number2.getAccessibleContext().setAccessibleName("");
        number3.getAccessibleContext().setAccessibleName("");
        number4.getAccessibleContext().setAccessibleName("");
        number5.getAccessibleContext().setAccessibleName("");
        number6.getAccessibleContext().setAccessibleName("");
        number7.getAccessibleContext().setAccessibleName("");
        number8.getAccessibleContext().setAccessibleName("");
        number9.getAccessibleContext().setAccessibleName("");
        number0.getAccessibleContext().setAccessibleName("");
        point.getAccessibleContext().setAccessibleName("");
        equals.getAccessibleContext().setAccessibleName("");
        plus.getAccessibleContext().setAccessibleName("");
        minus.getAccessibleContext().setAccessibleName("");
        multiply.getAccessibleContext().setAccessibleName("");
        divide.getAccessibleContext().setAccessibleName("");
        modulo.getAccessibleContext().setAccessibleName("");
        factorial.getAccessibleContext().setAccessibleName("");
        sin.getAccessibleContext().setAccessibleName("");
        cos.getAccessibleContext().setAccessibleName("");
        tan.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Operation of clear
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        screen.setText("0");
        val = 0;
        go = true;
        write = true;
        opt = ' ';
    }//GEN-LAST:event_clearActionPerformed

    // Operation of modulo
    private void moduloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduloActionPerformed
        // TODO add your handling code here:
       if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())){
           if (parenthesis){
               val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = '%';
                go = false;
                write = false;
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = '%';
                go = false;
                write = false;
            } else {
                screen.setText("ERROR");
            }
       }
            
    }//GEN-LAST:event_moduloActionPerformed

    // Operations of typing in numbers and point
    private void number1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number1ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("1");
            } else {
                screen.setText(screen.getText() + "1");
            }
        } else {
            screen.setText("1");
            write = true;
        }
        go = true;
        
    }//GEN-LAST:event_number1ActionPerformed

    private void number2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number2ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("2");
            } else {
                screen.setText(screen.getText() + "2");
            }
        } else {
            screen.setText("2");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number2ActionPerformed

    private void number3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number3ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("3");
            } else {
                screen.setText(screen.getText() + "3");
            }
        } else {
            screen.setText("3");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number3ActionPerformed

    private void number4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number4ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("4");
            } else {
                screen.setText(screen.getText() + "4");
            }
        } else {
            screen.setText("4");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number4ActionPerformed

    private void number5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number5ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("5");
            } else {
                screen.setText(screen.getText() + "5");
            }
        } else {
            screen.setText("5");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number5ActionPerformed

    private void number6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number6ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("6");
            } else {
                screen.setText(screen.getText() + "6");
            }
        } else {
            screen.setText("6");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number6ActionPerformed

    private void number7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number7ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("7");
            } else {
                screen.setText(screen.getText() + "7");
            }
        } else {
            screen.setText("7");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number7ActionPerformed

    private void number8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number8ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("8");
            } else {
                screen.setText(screen.getText() + "8");
            }
        } else {
            screen.setText("8");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number8ActionPerformed

    private void number9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number9ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("9");
            } else {
                screen.setText(screen.getText() + "9");
            }
        } else {
            screen.setText("9");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number9ActionPerformed

    private void number0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number0ActionPerformed
        // TODO add your handling code here:
        if (write) {
            if (Pattern.matches("[0]*", screen.getText())) {
                screen.setText("0");
            } else {
                screen.setText(screen.getText() + "0");
            }
        } else {
            screen.setText("0");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_number0ActionPerformed

    private void pointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointActionPerformed
        // TODO add your handling code here:
        if (write) {
            screen.setText(screen.getText() + ".");
        } else {
            screen.setText("0.");
            write = true;
        }
        go = true;
    }//GEN-LAST:event_pointActionPerformed

    // Operation of plus
    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
               val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = '+';
                go = false;
                write = false;
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = '+';
                go = false;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_plusActionPerformed

    // Operation of minus
    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
               val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = '-';
                go = false;
                write = false;
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = '-';
                go = false;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_minusActionPerformed

    // Operation of multiply
    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
               val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = '*';
                go = false;
                write = false;
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = '*';
                go = false;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        } 
    }//GEN-LAST:event_multiplyActionPerformed

    // Operation of divide
    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
               val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = '/';
                go = false;
                write = false;
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = '/';
                go = false;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_divideActionPerformed

    // Operation of equals
    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
               screen.setText("NO RIGHT PARENTHESIS");
            }
            else if (go) {
                val = Method.calc(val, screen.getText(), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = ' ';
                go = true;
                write = false;
                System.out.println(val);
            } else {
                screen.setText("ERROR");
            }
        }
            
        
    }//GEN-LAST:event_equalsActionPerformed

    // Operation of switching to scientific mode
    private void scientificActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scientificActionPerformed
        // TODO add your handling code here:
        if (scientific.isSelected()){
            this.setSize(new java.awt.Dimension(348, 400));
            sin.setVisible(true);
            cos.setVisible(true);
            tan.setVisible(true);
            factorial.setVisible(true);
            scientific.setBackground(new java.awt.Color(80, 162, 87));
           
        } else {
            this.setSize(new java.awt.Dimension(298, 400));
            sin.setVisible(false);
            cos.setVisible(false);
            tan.setVisible(false);
            factorial.setVisible(false);
            scientific.setBackground(new java.awt.Color(125, 36, 36));
        }
    }//GEN-LAST:event_scientificActionPerformed

    // Operation of sin
    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
                double tmp = Math.sin(Double.parseDouble(screen.getText()));
                val_par = Method.calc(val_par, String.valueOf(tmp), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = ' ';
                go = true;
                write = false;
            }
            else if (go) {
                double tmp = Math.sin(Double.parseDouble(screen.getText()));
                val = Method.calc(val, String.valueOf(tmp), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = ' ';
                go = true;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_sinActionPerformed

    // Operation of cos
    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
                double tmp = Math.cos(Double.parseDouble(screen.getText()));
                val_par = Method.calc(val_par, String.valueOf(tmp), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = ' ';
                go = true;
                write = false;
            }
            else if (go) {
                double tmp = Math.cos(Double.parseDouble(screen.getText()));
                val = Method.calc(val, String.valueOf(tmp), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = ' ';
                go = true;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_cosActionPerformed

    // Operation of tan
    private void tanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
                double tmp = Math.tan(Double.parseDouble(screen.getText()));
                val_par = Method.calc(val_par, String.valueOf(tmp), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = ' ';
                go = true;
                write = false;
            }
            else if (go) {
                double tmp = Math.tan(Double.parseDouble(screen.getText()));
                val = Method.calc(val, String.valueOf(tmp), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = ' ';
                go = true;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_tanActionPerformed

    // Operation of factorial
    private void factorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factorialActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
                double tmp = Method.fact(Double.parseDouble(screen.getText()));
                val_par = Method.calc(val_par, String.valueOf(tmp), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = ' ';
                go = true;
                write = false;
            }
            else if (go) {
                double tmp = Method.fact(Double.parseDouble(screen.getText()));
                val = Method.calc(val, String.valueOf(tmp), opt);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val))) {
                    screen.setText(String.valueOf((int) val));
                } else {
                    screen.setText(String.valueOf(val));
                }
                opt = ' ';
                go = true;
                write = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_factorialActionPerformed

    //operation of left parenthesis
    private void parenthesisLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parenthesisLeftActionPerformed
        // TODO add your handling code here:
        if (go || write)
            screen.setText("ERROR");
        else{
            parenthesis = true;
            go = false;
            write = false;
        }       
    }//GEN-LAST:event_parenthesisLeftActionPerformed

    //operation of right parenthesis
    private void parenthesisRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parenthesisRightActionPerformed
        // TODO add your handling code here:
        if (Pattern.matches("([-]?\\d+[.]\\d*)|([-]?\\d+)", screen.getText())) {
            if (parenthesis){
                val_par = Method.calc(val_par, screen.getText(), opt_par);
                if (Pattern.matches("[-]?[\\d]+[.][0]*", String.valueOf(val_par))) {
                    screen.setText(String.valueOf((int) val_par));
                } else {
                    screen.setText(String.valueOf(val_par));
                }
                opt_par = ' ';
                go = true;
                write = false;
                parenthesis = false;
            } else {
                screen.setText("ERROR");
            }
        }
    }//GEN-LAST:event_parenthesisRightActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new calculatorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton cos;
    private javax.swing.JButton divide;
    private javax.swing.JButton equals;
    private javax.swing.JButton factorial;
    private javax.swing.JButton minus;
    private javax.swing.JButton modulo;
    private javax.swing.JButton multiply;
    private javax.swing.JButton number0;
    private javax.swing.JButton number1;
    private javax.swing.JButton number2;
    private javax.swing.JButton number3;
    private javax.swing.JButton number4;
    private javax.swing.JButton number5;
    private javax.swing.JButton number6;
    private javax.swing.JButton number7;
    private javax.swing.JButton number8;
    private javax.swing.JButton number9;
    private javax.swing.JButton parenthesisLeft;
    private javax.swing.JButton parenthesisRight;
    private javax.swing.JButton plus;
    private javax.swing.JButton point;
    private javax.swing.JToggleButton scientific;
    private javax.swing.JTextField screen;
    private javax.swing.JButton sin;
    private javax.swing.JButton tan;
    // End of variables declaration//GEN-END:variables
}
